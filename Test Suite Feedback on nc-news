## Test Output



Read through all errors. Note that any failing test could be caused by a problem uncovered in a previous test on the same endpoint.

### PATCH `/api/topics` --- DONE COMPLETELY ---------------------------------- 

Assertion: expected 404 to equal 405

Hints:
- use `.all()` on each route, to serve a 405: Method Not Found status code


### GET `/api/articles` -------- DONE COMPLETELY --------- 

Assertion: the first article should have `article_id === 1`: expected 4 to equal 1

Hints:
- the default sort should be by `created_at` and the default order should be `desc`


### GET `/api/articles`-------- DONE COMPLETELY ---------

Assertion: The first article should have a comment count of `'13'`: expected '0' to equal '13'

Hints:
- add a `comment_count` property to each article
- join to the `comments` table, as this information lives there
- use an aggregate `COUNT` function
- use `GROUP BY` to avoid duplicate rows


### GET `/api/articles?sort_by=author`-------- DONE COMPLETELY --------- 

Assertion: expected 'icellusedkars' to equal 'rogersop'

Hints:
- accept a `sort_by` query, with a value of any column name
- use `author` for the column to store the username that created the article


### GET `/api/articles?order=asc` -------- DONE COMPLETELY --------- 

Assertion: expected 'Student SUES Mitch!' to equal 'Moustache'

Hints:
- accept an `order` query of `asc` or `desc`


### GET `/api/articles?author=butter_bridge`-------- DONE COMPLETELY--------- 

Assertion: all articles should be by the author in the query: expected [ Array(12) ] to satisfy [Function]

Hints:
- accept an `author` query of any author that exists in the database
- use `where` in the model


### GET `/api/articles?topic=mitch` -------- DONE COMPLETELY --------- 

Assertion: all articles should be by the topic in the query: expected [ Array(12) ] to satisfy [Function]

Hints:
- accept an `topic` query of any topic slug that exists in the database
- use `where` in the model


### GET `/api/articles?author=lurker` -------- DONE COMPLETELY ---------

Assertion: expected [ Array(12) ] to deeply equal []

Hints:
- give a 200 status and an empty array when articles for a topic that does exist, but has no articles is requested
- use a separate model to check whether the user exists


### GET `/api/articles?topic=paper`------- DONE COMPLETELY---------- 

Assertion: expected [ Array(12) ] to deeply equal []

Hints:
- give a 200 status and an empty array when articles for a topic that does exist, but has no articles is requested
- use a separate model to check whether the topic exists


### GET `/api/articles?topic=not-a-topic`------- DONE COMPLETELY ----------  

Assertion: expected 200 to equal 404

Hints:
- use a 404 status code, when provided a non-existent topic
- use a separate model to check whether the topic exists


### GET `/api/articles?author=not-an-author`------- DONE COMPLETELY----------  SAME PROBLEM

Assertion: expected 200 to equal 404

Hints:
- use a 404 status code, when provided a non-existent author
- use a separate model to check whether the author exists

 
### PATCH `/api/articles` --- DONE COMPLETELY ----------------------------------

Assertion: expected 404 to equal 405

Hints:
- use `.all()` on each route, to serve a 405: Method Not Found status code


### GET `/api/articles/1000` ------ DONE COMPLETELY ---------

Assertion: expected 200 to equal 404

Hints:
- if an article is not found with a valid `article_id`, use a 404: Not Found status code


### GET `/api/articles/dog` ------ DONE COMPLETELY ---------

Assertion: expected 405 to equal 400 

Hints:
- if send an invalid `article_id`, use a 400: Bad Request status code


### PUT `/api/articles/1` --- DONE COMPLETELY ----------------------------------

Assertion: expected 404 to equal 405

Hints:
- use `.all()` on each route, to serve a 405: Method Not Found status code


### PATCH `/api/articles/1` -------- DONE COMPLETELY---------

Assertion: expected 101 to equal 100

Hints:
- ignore a `patch` request with no information in the request body, and send the unchanged article to the client
- provide a default argument of `0` to the `increment` method, otherwise it will automatically increment by 1


### PATCH `/api/articles/1` ----- NEED TO LOOK INTO IT---- 

Assertion: expected 405 to equal 400

Hints:
- use a 400: Bad Request status code when sent an invalid `inc_votes` value


### GET `/api/articles/1000/comments`----------- NEED TO LOOK INTO IT---- 

Assertion: expected 200 to equal 404

Hints:
- return 404: Not Found when given a valid `article_id` that does not exist


### GET `/api/articles/not-a-valid-id/comments` ---------- DONE COMPLETELY ------------

Assertion: expected 405 to equal 400

Hints:
- return 400: Bad Request when given an invalid `article_id`


### GET `/api/articles/1/comments?sort_by=not-a-valid-column` ---------- DONE COMPLETELY ------------

Assertion: expected 405 to be one of [ 200, 400 ]

Hints:
- filter out invalid `sort_by` queries _OR_ handle in the error handling middleware
- pick a consistent approach: ignore the invalid query, and use a 200 to serve up the articles with the default sort _OR_ use a 400 and provide a useful message to the client


### PUT `/api/articles/1/comments`--- DONE COMPLETELY ----------------------------------

Assertion: expected 404 to equal 405 

Hints:
- use `.all()` on each route, to serve a 405: Method Not Found status code


### POST `/api/articles/1/comments` --- DONE COMPLETELY ----------------------------------

Assertion: expected 200 to equal 201

Hints:
- use a 201: Created status code for a successful `POST` request


### POST `/api/articles/1/comments` --- DONE COMPLETELY --------------- ----------------------------------

Assertion: expected [ Array(1) ] to contain keys 'comment_id', 'author', 'body', 'votes', and 'created_at'

Hints:
- send the new comment back to the client in an object, with a key of comment: `{ comment: {} }`
- ensure all columns in the comments table match the README


### POST `/api/articles/1/comments`  ------------DONE COMPLETELY ---------------

Assertion: expected undefined to equal 0

Hints:
- default `votes` to `0` in the migrations
- default `created_at` to the current time in the migrations


### POST `/api/articles/1/comments` ----------DONE COMPLETELY-----------

Assertion: expected 200 to equal 400

Hints:
- use a 400: Bad Request status code when `POST` request does not include all the required keys
- use `notNullable` in migrations for required columns


### POST `/api/articles/10000/comments` ----------DONE COMPLETELY-----------

Assertion: expected 405 to be one of [ 404, 422 ]

Hints:
- use a 404: Not Found _OR_ 422: Unprocessable Entity status code when `POST` contains a valid article ID that does not exist


### POST `/api/articles/not-a-valid-id/comments`----------DONE COMPLETELY-----------

Assertion: expected 405 to equal 400

Hints:
- use a 400: Bad Request when `POST` contains an invalid article_id


### PATCH `/api/comments/1` ----------DONE COMPLETELY-----------

Assertion: expected 405 to equal 400

Hints:
- use a 400: Bad Request status code when sent an invalid `inc_votes` value


### PATCH `/api/comments/1` -------- DONE COMPLETELY ---------

Assertion: expected 17 to equal 16

Hints:
- use 200: OK status code when sent a body with no `inc_votes` property
- send an unchanged comment when no `inc_votes` is provided in the request body


### PATCH `/api/comments/1000`---------DONE COMPLETELY---------

Assertion: expected 200 to equal 404

Hints:
- use a 404: Not Found when `PATCH` contains a valid comment_id that does not exist


### PATCH `/api/comments/not-a-valid-id`---------NEED TO LOOK INTO IT---------

Assertion: expected 405 to equal 400

Hints:
- use a 400: Bad Request when `PATCH` contains an invalid comment_id


### PATCH `/api/comments/1`---------NEED TO LOOK INTO IT---------

Assertion: expected 405 to equal 400

Hints:
- use a 400: Bad Request status code when sent an invalid `inc_votes` value


### PUT `/api/comments/1` --- DONE COMPLETELY ----------------------------------

Assertion: expected 404 to equal 405

Hints:
- use `.all()` on each route, to serve a 405: Method Not Found status code


### DELETE `/api/comments/1000` ---- DONE COMPLETELY------

Assertion: expected 405 to equal 404

Hints:
- use a 404: Not Found when `DELETE` contains a valid comment_id that does not exist


### DELETE `/api/comments/not-a-number` ---- DONE COMPLETELY------

Assertion: expected 405 to equal 400

Hints:
- use a 400: Bad Request when `DELETE` contains an invalid comment_id


### GET `/api/users/not-a-username`----- DONE COMPLETELY ------------------

Assertion: expected 405 to equal 404

Hints:
- if a user is not found with a valid `user_id`, use a 404: Not Found status code


### PUT `/api/users/butter_bridge` --- DONE COMPLETELY ----------------------------------

Assertion: expected 404 to equal 405

Hints:
- use `.all()` on each route, to serve a 405: Method Not Found status code


### DELETE `/api`--- DONE COMPLETELY  ----------------------------------

Assertion: expected 404 to equal 405

Hints:
- use `.all()` on each route, to serve a 405: Method Not Found status code


